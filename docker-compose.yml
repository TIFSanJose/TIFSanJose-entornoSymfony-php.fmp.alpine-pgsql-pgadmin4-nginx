version: "3.7"

services:
    db_postgres:
        image: postgres:13.2-alpine
        container_name: docker_${PROYECT_NAME}-db
        restart: always
        environment:
            - POSTGRES_PASSWORD=${DB_PASSWORD}
            - POSTGRES_USER=${USER}
            - POSTGRES_DB=${POSTGRES_DB}
            - PGDATA=${PGDATA}
            - HOSTNAME=${DB_HOSTNAME}
        volumes:
            - ./postgres/data:${PGDATA}
        ports:
            - "${DB_PORT}:5432"

    gui_postgres:
        image: dpage/pgadmin4
        container_name: docker_${PROYECT_NAME}-pgadmin
        restart: always
        environment:
            - PGADMIN_DEFAULT_EMAIL=${EMAIL_SESSION}
            - PGADMIN_DEFAULT_PASSWORD=${PG_PASSWORD}
            # - PGADMIN_LISTEN_ADDRESS=${PG_PUERTO}
            # - PGADMIN_LISTEN_PORT=${PG_PUERTO}
            - HOSTNAME=${PG_HOSTNAME}

        volumes:
# chown -R 5050:5050 pgadmin 
# cambiar de proprietario el directorio donde se guarda los datos
# Esto se puede automatizar con config.py o algo parecido
            - ./pgadmin/data:${PG_WORK_DIR}
        ports:
# puerto-Host:puerto-Contenedor
            - "8092:5050"
            - "8093:80"
            - "8094:443"
        links:
            - "db_postgres:${PG_NOMBRE_CONEXION}"

    php-web:
        build:
            context: ./php
        restart: always
        container_name: "docker_${PROYECT_NAME}-php_web"
        environment:
            - PGHOST=docker_${PROYECT_NAME}-db
            - PGPORT=5432
            - PGDATABASE=${DB_NAME}
            - PGUSER=${DB_USER}
            - PGPASSWORD=${DB_PASSWORD}
            - HOSTNAME=${PHP_HOSTNAME}
            - AKISMET_KEY=${AKISMET_KEY}
# Configuracion para MailCatcher >> No anduvo << 
            # - SYMFONY_DEFAULT_ROUTE_SCHEME=${PHP_SY_DF_ROUTE_SCHEME}
            # - SYMFONY_DEFAULT_ROUTE_HOST=${PHP_SY_DF_ROUTE_HOST}
            # - MAILER_DSN="smtp://docker_${PROYECT_NAME}-mailer:1025"
            # - ADMIN_EMAIL=${PHP_ADMIN_MAIL}
# Configuracion webPack-Encore
            - SYMFONY_PROJECT_DEFAULT_ROUTE_URL=http://localhost:8100/
            - API_ENDPOINT=http://localhost:8100/
            - ENV_API_ENDPOINT=http://localhost:8100/
# Cofiguracion BlackFire
            # - BLACKFIRE_CLIENT_ID=${BF_CLIENT_ID}
            # - BLACKFIRE_CLIENT_TOKEN=${BF_CLIENT_TOKEN}
# Configuracion Redis
            - RSHOST=docker_${PROYECT_NAME}-redis
            - RSPORT=6379
        volumes:
            - ../${PROYECT_NAME}:${PHP_WORK_DIR}
        links:
            - "db_postgres"
        ports: 
            - "8000:8000"

    nginx:
        build: 
            context: ./nginx
        restart: always
        container_name: "docker_${PROYECT_NAME}-nginx"
        environment:
            - HOSTNAME=${NG_HOSTNAME}
        volumes:
            - ../${PROYECT_NAME}:${NG_WORKDIR}
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./nginx/sites/:/etc/nginx/sites-available
            - ./nginx/conf.d/:/etc/nginx/conf.d
            - ./logs:/var/log
        depends_on:
            - php-web
        ports:
            - "${NG_PORT}:80"
            - "${NG_PORTSSL}:443"

# Paso 20.6 Symfony-GuiaRapida
# receptor de correo. Un receptor de correo proporciona un servidor SMTP que no 
#entrega los correos electrónicos, sino que los hace disponibles a través de una interfaz Web:
# >> No anduvo: levanto bien, pero no tomo las mails << 
    # mailer:
    #     image: schickling/mailcatcher
    #     container_name: docker_${PROYECT_NAME}-mailer
    #     ports: 
    #         - "${MAILER_PORT_SMTP}:1025"
    #         - "${MAILER_PORT}:1080"
    #     environment:
    #         - HOSTNAME=${MAILER_HOSTNAME}

# Paso 29.2 Agente BlackFire en Docker.    
    # blackfire:
    #         image: blackfire/blackfire:2
    #         container_name: "docker_${PROYECT_NAME}-blackfire"
    #         environment:  
    #             - BLACKFIRE_SERVER_ID=${BF_SERVER_ID}
    #             - BLACKFIRE_SERVER_TOKEN=${BF_SERVER_TOKEN}
    #             - CLIENT_ID=${BF_CLIENT_ID}
    #             - CLIENT_TOKEN=${BF_CLIENT_TOKEN}
    #             - HOSTNAME=${BF_HOSTNAME}
    #         ports: 
    #             - "${BF_PORT}:8707"

# Paso 31 Redis
    redis:
            image: redis:5-alpine
            container_name: "docker_${PROYECT_NAME}-redis"
            environment:
                - HOSTNAME=${RS_HOSTNAME}
            ports: 
                - "${RS_PORT}:6379"

# Paso 32 Rabbit_MQ
    rabbitmq:
        image: rabbitmq:3.8.16-management-alpine
        container_name: "docker_${PROYECT_NAME}-rabbitmq"
        volumes: 
            - ./rabbitmq/data:/var/lib/rabbitmq/mnesia/
        environment:
            - HOSTNAME=${RBIT_HOSTNAME}
        ports: 
            - "${RBIT_PORT}:5672"
            - "${RBIT_PORT_A}:15672"
    
